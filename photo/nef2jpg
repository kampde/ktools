#!/bin/bash

set -o noclobber

usage() {
	cat <<USAGE
usage: $0 [OPTIONS] NEF_FILE[..]

Converts NEF_FILE to jpg and stores it in parent folder.

Valid options are:

    -h, --help                   Show this help and exit
    -d, --dimension=DIMENSION    Make jpg of dimensions DIMENSION (use orig to
                                 keep NEF dimensions). (Default: $dimension)
    -e, --keep-exif              Copy the EXIF info from the NEF to the JPG.
                                 (Default: $keep_exif)
    --no-keep-exif               Do not copy the EXIF from the NEF to the JPG.
    -p, --parallel=JOBS          Execute JOBS conversion in parallel
                                 (default: $jobs)
USAGE
}

EXITVAL=0

OUTOPT=$(getopt --options d:ehp: --long help,keep-exif,no-keep-exif,dimension:,parallel: -n "$0" -- "$@")

eval set -- "$OUTOPT"

keep_exif=on
dimension=1920x1080
jobs=4

while true
do
	case "$1" in
	-h|--help)
		usage
		exit 0
		;;
	-e|--keep-exif)
		keep_exif=1
		shift
		;;
	--no-keep-exif)
		keep_exif=
		shift
		;;
	-d|--dimension)
		if [ "$2" = "orig" ]
		then
			dimension=
		else
			dimension="$2"
		fi
		shift 2
		;;
	-p|--parallel)
		jobs="$2"
		shift 2
		;;
	--)
		# end of processed getopt options, break the loop
		shift
		break
		;;
	*)
		ERROR=$[ ( $RANDOM % 10000 ) + 1 ]
		echo "[-] Unexpected error: code $ERROR" >&2
		exit 1
		break
		;;
	esac
done

if [ "$dimension" ]
then
	resize_params=("-resize" "$dimension")
else
	resize_params=()
fi

convierte() {
	local orig="$1"
	local dest="$2"

	local exitval=0

	echo -n "Creando $dest ... "
	if dcraw -e -c "$orig" | convert - "${resize_params[@]}" "$dest"
	then
		echo "  OK"
		if [ "$keep_exif" ]
		then
			echo -n "Aplicando EXIF a $dest ... "
			if exiftool -overwrite_original -TagsFromFile "$orig" "$dest"
			then
				echo "  OK"
			else
				echo "  MIERDA"
			fi
		fi
	else
		echo "  MIERDA"
		exitval=3
	fi
	return $exitval
}

FOTONUM=0
for foto
do
	FOTONUM=$((FOTONUM + 1))
	ext="${foto##*.}"
	if [ "${ext,,}" = "nef" ]
	then

		nom="../"${foto%.*}".from_raw.jpg"
		if [ -s "$nom" ]
		then
			echo "$nom existe"
		else
			convierte "$foto" "$nom" &
		fi
	else
		echo "$foto no es una imagen raw (NEF)" >&2
		EXITVAL=1
	fi

	if [ "$((FOTONUM % jobs))" = "0" ]
	then
		echo "Waiting..."
		wait
	fi
done
wait
